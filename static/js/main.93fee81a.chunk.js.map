{"version":3,"sources":["App.module.css","components/ToDoList/Task/Task.module.css","components/ToDoList/ToDoList.module.css","components/Filter/Filter.module.css","components/NewTask/NewTask.module.css","components/ToDoList/Task/Task.js","components/ToDoList/ToDoList.js","components/Filter/Filter.js","components/NewTask/NewTask.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Task","state","taskName","props","task","isDone","done","inputChangeHandler","e","setState","prevState","ifDone","this","textDecoration","className","styling","type","checked","onChange","onClick","check","style","Component","ToDoList","tasks","map","index","ifHide","key","ToDo","Filter","clearList","NewTask","inputChange","placeholder","value","inputValue","addTask","App","newTask","hide","target","addTaskHandler","addTaskOnEnterHandler","checkTaskHandler","updateState","forEach","hideDoneTasksHandler","clearListHandler","isTaskExist","length","window","addEventListener","fontSize","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93fee81a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__nAIgf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Task\":\"Task_Task__16Qnl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ToDo\":\"ToDoList_ToDo__2ctlm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filter_Filter__WqJ18\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NewTask\":\"NewTask_NewTask__2XPj2\"};","import React, { Component } from 'react';\r\nimport styling from './Task.module.css';\r\n\r\nclass Task extends Component {\r\n\r\n  state = {\r\n    taskName: this.props.task,\r\n    isDone: this.props.done\r\n  }\r\n\r\n  inputChangeHandler = (e) => {\r\n    this.setState(prevState => {\r\n      return {isDone: !prevState.isDone}\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let ifDone = {};\r\n    if (this.props.done === true) {\r\n      ifDone = { textDecoration: 'line-through' }\r\n    }\r\n    return (\r\n      <div className={styling.Task}>\r\n        <input type=\"checkbox\" checked={this.state.isDone} onChange={this.inputChangeHandler} onClick={()=>this.props.check(this.state.taskName)}/>\r\n        <p style={ifDone}>{this.props.task}</p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task/Task';\r\nimport styling from './ToDoList.module.css';\r\n\r\nconst ToDoList = props => {\r\n\r\n  const tasks = props.tasks.map((task, index) => {\r\n    if (props.ifHide && task.done) {\r\n      return null;\r\n    }\r\n    else {\r\n      return <Task task={task.taskName} key={index} check={props.check} done={task.done}/>\r\n    }\r\n    \r\n  });\r\n  return (\r\n    <div className={styling.ToDo}>\r\n      {tasks}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoList;","import React from 'react';\r\nimport styling from './Filter.module.css';\r\n\r\nconst Filter = props => {\r\n  return (\r\n    <div className={styling.Filter}>\r\n      <input type=\"checkbox\" onClick={props.ifDone}/>\r\n      <p>hide completed</p>\r\n      <button onClick={props.clearList}><i className=\"fas fa-trash\"></i></button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;","import React from 'react';\r\nimport styling from './NewTask.module.css';\r\n\r\nconst NewTask = props => {\r\n\r\n\r\n  return (\r\n    <div className={styling.NewTask}>\r\n      <input type=\"text\" onChange={(e) => props.inputChange(e)} placeholder=\"Add new task...\" value={props.inputValue}/>\r\n      <button onClick={props.addTask}><i className=\"fas fa-plus-circle\"></i></button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewTask;","import React, { Component } from \"react\";\nimport styling from \"./App.module.css\";\nimport ToDoList from \"./components/ToDoList/ToDoList\";\nimport Filter from \"./components/Filter/Filter\";\nimport NewTask from \"./components/NewTask/NewTask\";\n\nclass App extends Component {\n  state = {\n    tasks: [\n      // { taskName: \"buy eggs\", done: false },\n      // { taskName: \"buy bread\", done: false },\n      // { taskName: \"eat dinner\", done: false },\n      // { taskName: \"get a job\", done: false },\n    ],\n    newTask: {\n      taskName: \"\",\n    },\n    hide: false,\n  };\n\n  inputChangeHandler = (task) => {\n    this.setState({ newTask: { taskName: task.target.value } });\n  };\n\n  addTaskHandler = () => {\n    const newTask = this.state.newTask.taskName;\n    if (!newTask == \"\") {\n      this.setState({\n        tasks: [...this.state.tasks, { taskName: newTask, done: false }],\n        newTask: { taskName: \"\" }\n      });\n    }\n  };\n\n  addTaskOnEnterHandler = (e) => {\n    if (e.key === \"Enter\") {\n      this.addTaskHandler();\n    }\n  };\n\n  checkTaskHandler = (taskName) => {\n    const updateState = [...this.state.tasks];\n    updateState.forEach((task) => {\n      if (task.taskName === taskName) {\n        if (task.done === false) {\n          task.done = true;\n        } else {\n          task.done = false;\n        }\n      }\n    });\n    this.setState({ tasks: updateState });\n  };\n\n  hideDoneTasksHandler = () => {\n    this.setState(prevState => {\n      return { hide: !prevState.hide }\n    })\n  }\n\n  clearListHandler = () => {\n    this.setState({tasks:[]})\n  }\n\n  render() {\n    const isTaskExist = this.state.tasks.length;\n\n    window.addEventListener(\"keyup\", this.addTaskOnEnterHandler);\n\n    return (\n      <div className={styling.App}>\n        <Filter ifDone={this.hideDoneTasksHandler} clearList={this.clearListHandler}/>\n        <hr />\n        {isTaskExist ? (\n          <ToDoList tasks={this.state.tasks} check={this.checkTaskHandler} ifHide={this.state.hide}/>\n        ) : (\n          <p style={{fontSize:'2rem'}}>Nothing to do...</p>\n        )}\n        <hr />\n        <NewTask\n          inputChange={this.inputChangeHandler}\n          addTask={this.addTaskHandler}\n          inputValue={this.state.newTask.taskName}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}